import numpy as np

def doolittle(A, B):
    n = len(A)
    L,U = np.eye(n),np.zeros((n,n))
    
    for i in range(n):
        for j in range(i, n):
            U[i, j] = A[i, j] - sum(L[i, k] * U[k, j] for k in range(i))
        for j in range(i + 1, n):
            L[j, i] = (A[j, i] - sum(L[j, k] * U[k, i] for k in range(i))) / U[i, i]
    return L, U

A = np.array([[2,-5,3], [-1, 2, -1], [3, -1, 2]])
B = np.array(([2,1,3]))
L,U = doolittle(A,B)
print(f"The lower triangular matrix L is \n{L}")
print(f"\nThe upper triangular matrix U is \n{U}")
y = np.linalg.solve(L,B)
x = np.linalg.solve(U,y)
print(f"\nSolution X: {x}")
